<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!--This file represents the results of running a test suite-->
<test-results name="C:\Code\njasmine\build\NJasmine.tests.dll" total="119" errors="0" failures="0" not-run="2" inconclusive="0" ignored="0" skipped="0" invalid="2" date="2011-08-11" time="19:32:19">
  <environment nunit-version="2.5.9.10348" clr-version="2.0.50727.5446" os-version="Microsoft Windows NT 6.1.7601 Service Pack 1" platform="Win32NT" cwd="C:\Code\njasmine" machine-name="MAGENTA" user="Ilker" user-domain="Magenta" />
  <culture-info current-culture="de-DE" current-uiculture="en-US" />
  <test-suite type="Assembly" name="C:\Code\njasmine\build\NJasmine.tests.dll" executed="True" result="Success" success="True" time="1.383" asserts="0">
    <results>
      <test-suite type="Namespace" name="NJasmineTests" executed="True" result="Success" success="True" time="1.355" asserts="0">
        <results>
          <test-suite type="Namespace" name="Core" executed="True" result="Success" success="True" time="0.408" asserts="0">
            <results>
              <test-suite type="TestFixture" name="build_and_run_suite_with_loops" executed="True" result="Success" success="True" time="0.195" asserts="0">
                <results>
                  <test-case name="NJasmineTests.Core.build_and_run_suite_with_loops.can_load_tests" executed="True" result="Success" success="True" time="0.153" asserts="0" />
                  <test-case name="NJasmineTests.Core.build_and_run_suite_with_loops.can_run_tests_a1" executed="True" result="Success" success="True" time="0.011" asserts="1" />
                  <test-case name="NJasmineTests.Core.build_and_run_suite_with_loops.can_run_tests_a3" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="NJasmineTests.Core.build_and_run_suite_with_loops.can_run_tests_b1" executed="True" result="Success" success="True" time="0.011" asserts="1" />
                  <test-case name="NJasmineTests.Core.build_and_run_suite_with_loops.can_run_tests_b3" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="NJasmineTests.Core.build_and_run_suite_with_loops.can_run_tests_c" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestSuite" name="GlobalSetupManagerTests" executed="True" result="Success" success="True" time="0.118" asserts="0">
                <results>
                  <test-suite type="TestSuite" name="given a fixture with global setup" executed="True" result="Success" success="True" time="0.066" asserts="0">
                    <properties>
                      <property name="MultilineName" value="NJasmineTests.Core.GlobalSetupManagerTests,&#xA;given a fixture with global setup" />
                    </properties>
                    <results>
                      <test-suite type="TestSuite" name="when a test is going to be run" executed="True" result="Success" success="True" time="0.064" asserts="0">
                        <properties>
                          <property name="MultilineName" value="NJasmineTests.Core.GlobalSetupManagerTests,&#xA;given a fixture with global setup,&#xA;when a test is going to be run" />
                        </properties>
                        <results>
                          <test-case name="NJasmineTests.Core.GlobalSetupManagerTests, given a fixture with global setup, when a test is going to be run, then the global setup has ran" executed="True" result="Success" success="True" time="0.034" asserts="0">
                            <properties>
                              <property name="MultilineName" value="NJasmineTests.Core.GlobalSetupManagerTests,&#xA;given a fixture with global setup,&#xA;when a test is going to be run,&#xA;then the global setup has ran" />
                            </properties>
                          </test-case>
                          <test-case name="NJasmineTests.Core.GlobalSetupManagerTests, given a fixture with global setup, when a test is going to be run, then the global setup result is available" executed="True" result="Success" success="True" time="0.005" asserts="0">
                            <properties>
                              <property name="MultilineName" value="NJasmineTests.Core.GlobalSetupManagerTests,&#xA;given a fixture with global setup,&#xA;when a test is going to be run,&#xA;then the global setup result is available" />
                            </properties>
                          </test-case>
                          <test-suite type="TestSuite" name="when a later nested test is going to be ran" executed="True" result="Success" success="True" time="0.019" asserts="0">
                            <properties>
                              <property name="MultilineName" value="NJasmineTests.Core.GlobalSetupManagerTests,&#xA;given a fixture with global setup,&#xA;when a test is going to be run,&#xA;when a later nested test is going to be ran" />
                            </properties>
                            <results>
                              <test-case name="NJasmineTests.Core.GlobalSetupManagerTests, given a fixture with global setup, when a test is going to be run, when a later nested test is going to be ran, then the global setup has ran" executed="True" result="Success" success="True" time="0.002" asserts="0">
                                <properties>
                                  <property name="MultilineName" value="NJasmineTests.Core.GlobalSetupManagerTests,&#xA;given a fixture with global setup,&#xA;when a test is going to be run,&#xA;when a later nested test is going to be ran,&#xA;then the global setup has ran" />
                                </properties>
                              </test-case>
                              <test-suite type="TestSuite" name="when a later test nested in another block is going to be ran" executed="True" result="Success" success="True" time="0.003" asserts="0">
                                <properties>
                                  <property name="MultilineName" value="NJasmineTests.Core.GlobalSetupManagerTests,&#xA;given a fixture with global setup,&#xA;when a test is going to be run,&#xA;when a later nested test is going to be ran,&#xA;when a later test nested in another block is going to be ran" />
                                </properties>
                                <results>
                                  <test-case name="NJasmineTests.Core.GlobalSetupManagerTests, given a fixture with global setup, when a test is going to be run, when a later nested test is going to be ran, when a later test nested in another block is going to be ran, then the global setup has ran" executed="True" result="Success" success="True" time="0.001" asserts="0">
                                    <properties>
                                      <property name="MultilineName" value="NJasmineTests.Core.GlobalSetupManagerTests,&#xA;given a fixture with global setup,&#xA;when a test is going to be run,&#xA;when a later nested test is going to be ran,&#xA;when a later test nested in another block is going to be ran,&#xA;then the global setup has ran" />
                                    </properties>
                                  </test-case>
                                </results>
                              </test-suite>
                              <test-suite type="TestSuite" name="when we're done running tests" executed="True" result="Success" success="True" time="0.011" asserts="0">
                                <properties>
                                  <property name="MultilineName" value="NJasmineTests.Core.GlobalSetupManagerTests,&#xA;given a fixture with global setup,&#xA;when a test is going to be run,&#xA;when a later nested test is going to be ran,&#xA;when we're done running tests" />
                                </properties>
                                <results>
                                  <test-case name="NJasmineTests.Core.GlobalSetupManagerTests, given a fixture with global setup, when a test is going to be run, when a later nested test is going to be ran, when we're done running tests, then expected cleanup runs" executed="True" result="Success" success="True" time="0.001" asserts="0">
                                    <properties>
                                      <property name="MultilineName" value="NJasmineTests.Core.GlobalSetupManagerTests,&#xA;given a fixture with global setup,&#xA;when a test is going to be run,&#xA;when a later nested test is going to be ran,&#xA;when we're done running tests,&#xA;then expected cleanup runs" />
                                    </properties>
                                  </test-case>
                                  <test-case name="NJasmineTests.Core.GlobalSetupManagerTests, given a fixture with global setup, when a test is going to be run, when a later nested test is going to be ran, when we're done running tests, then the setup thread finishes" executed="True" result="Success" success="True" time="0.007" asserts="0">
                                    <properties>
                                      <property name="MultilineName" value="NJasmineTests.Core.GlobalSetupManagerTests,&#xA;given a fixture with global setup,&#xA;when a test is going to be run,&#xA;when a later nested test is going to be ran,&#xA;when we're done running tests,&#xA;then the setup thread finishes" />
                                    </properties>
                                  </test-case>
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestSuite" name="given a fixture with an error at its outer scope" executed="True" result="Success" success="True" time="0.024" asserts="0">
                    <properties>
                      <property name="MultilineName" value="NJasmineTests.Core.GlobalSetupManagerTests,&#xA;given a fixture with an error at its outer scope" />
                    </properties>
                    <results>
                      <test-suite type="TestSuite" name="when a test is to be ran" executed="True" result="Success" success="True" time="0.023" asserts="0">
                        <properties>
                          <property name="MultilineName" value="NJasmineTests.Core.GlobalSetupManagerTests,&#xA;given a fixture with an error at its outer scope,&#xA;when a test is to be ran" />
                        </properties>
                        <results>
                          <test-case name="NJasmineTests.Core.GlobalSetupManagerTests, given a fixture with an error at its outer scope, when a test is to be ran, then the exception is reported" executed="True" result="Success" success="True" time="0.017" asserts="0">
                            <properties>
                              <property name="MultilineName" value="NJasmineTests.Core.GlobalSetupManagerTests,&#xA;given a fixture with an error at its outer scope,&#xA;when a test is to be ran,&#xA;then the exception is reported" />
                            </properties>
                          </test-case>
                          <test-suite type="TestSuite" name="when we're done running tests" executed="True" result="Success" success="True" time="0.003" asserts="0">
                            <properties>
                              <property name="MultilineName" value="NJasmineTests.Core.GlobalSetupManagerTests,&#xA;given a fixture with an error at its outer scope,&#xA;when a test is to be ran,&#xA;when we're done running tests" />
                            </properties>
                            <results>
                              <test-case name="NJasmineTests.Core.GlobalSetupManagerTests, given a fixture with an error at its outer scope, when a test is to be ran, when we're done running tests, then the setup thread finishes" executed="True" result="Success" success="True" time="0.002" asserts="0">
                                <properties>
                                  <property name="MultilineName" value="NJasmineTests.Core.GlobalSetupManagerTests,&#xA;given a fixture with an error at its outer scope,&#xA;when a test is to be ran,&#xA;when we're done running tests,&#xA;then the setup thread finishes" />
                                </properties>
                              </test-case>
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="TestSuite" name="has_test_in_loop" executed="True" result="Success" success="True" time="0.011" asserts="0">
                <results>
                  <test-case name="NJasmineTests.Core.has_test_in_loop, a1" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <properties>
                      <property name="MultilineName" value="NJasmineTests.Core.has_test_in_loop,&#xA;a1" />
                    </properties>
                  </test-case>
                  <test-case name="NJasmineTests.Core.has_test_in_loop, a2" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <properties>
                      <property name="MultilineName" value="NJasmineTests.Core.has_test_in_loop,&#xA;a2" />
                    </properties>
                  </test-case>
                  <test-case name="NJasmineTests.Core.has_test_in_loop, a3" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <properties>
                      <property name="MultilineName" value="NJasmineTests.Core.has_test_in_loop,&#xA;a3" />
                    </properties>
                  </test-case>
                  <test-suite type="TestSuite" name="nested" executed="True" result="Success" success="True" time="0.004" asserts="0">
                    <properties>
                      <property name="MultilineName" value="NJasmineTests.Core.has_test_in_loop,&#xA;nested" />
                    </properties>
                    <results>
                      <test-case name="NJasmineTests.Core.has_test_in_loop, nested, b1" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <properties>
                          <property name="MultilineName" value="NJasmineTests.Core.has_test_in_loop,&#xA;nested,&#xA;b1" />
                        </properties>
                      </test-case>
                      <test-case name="NJasmineTests.Core.has_test_in_loop, nested, b2" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <properties>
                          <property name="MultilineName" value="NJasmineTests.Core.has_test_in_loop,&#xA;nested,&#xA;b2" />
                        </properties>
                      </test-case>
                      <test-case name="NJasmineTests.Core.has_test_in_loop, nested, b3" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <properties>
                          <property name="MultilineName" value="NJasmineTests.Core.has_test_in_loop,&#xA;nested,&#xA;b3" />
                        </properties>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-case name="NJasmineTests.Core.has_test_in_loop, c" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <properties>
                      <property name="MultilineName" value="NJasmineTests.Core.has_test_in_loop,&#xA;c" />
                    </properties>
                  </test-case>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="NJasmineSuiteBuilder_suite_discovery" executed="True" result="Success" success="True" time="0.010" asserts="4">
                <results>
                  <test-case name="NJasmineTests.Core.NJasmineSuiteBuilder_suite_discovery.doesnt_handle_most_test_fixtures" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                  <test-case name="NJasmineTests.Core.NJasmineSuiteBuilder_suite_discovery.will_handle_subclasses_of_NJasmineFixture" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                  <test-case name="NJasmineTests.Core.NJasmineSuiteBuilder_suite_discovery.will_not_build_abstract_classes" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                  <test-case name="NJasmineTests.Core.NJasmineSuiteBuilder_suite_discovery.will_not_handle_nonpublic_subclasses_of_NJasmineFixture" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="NJasmineTestMethod_can_detect_reentrancy" executed="True" result="Success" success="True" time="0.001" asserts="0">
                <results>
                  <test-case name="NJasmineTests.Core.NJasmineTestMethod_can_detect_reentrancy.can_detect_reentrance_during_it" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="NJasmineTestMethod_can_run_a_test" executed="True" result="Success" success="True" time="0.006" asserts="0">
                <results>
                  <test-case name="NJasmineTests.Core.NJasmineTestMethod_can_run_a_test.can_be_ran" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                  <test-case name="NJasmineTests.Core.NJasmineTestMethod_can_run_a_test.duplicated_runs_dont_accidentally_accumulate_afterEach_calls" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestSuite" name="SomeNestedClass" executed="True" result="Inconclusive" success="False" time="0.000" asserts="0" />
              <test-suite type="TestSuite" name="STA" executed="True" result="Success" success="True" time="0.010" asserts="0">
                <properties>
                  <property name="APARTMENT_STATE" value="STA" />
                </properties>
                <results>
                  <test-case name="NJasmineTests.Core.STA, is STA" executed="True" result="Success" success="True" time="0.006" asserts="0">
                    <properties>
                      <property name="MultilineName" value="NJasmineTests.Core.STA,&#xA;is STA" />
                    </properties>
                  </test-case>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="TestPositionTests" executed="True" result="Success" success="True" time="0.040" asserts="0">
                <results>
                  <test-case name="NJasmineTests.Core.TestPositionTests.can_be_used_with_dictionaries" executed="True" result="Success" success="True" time="0.005" asserts="0" />
                  <test-case name="NJasmineTests.Core.TestPositionTests.GetFirstChildPosition" executed="True" result="Success" success="True" time="0.003" asserts="0" />
                  <test-case name="NJasmineTests.Core.TestPositionTests.GetNextSiblingPosition" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                  <test-case name="NJasmineTests.Core.TestPositionTests.IsInScopeFor" executed="True" result="Success" success="True" time="0.016" asserts="0" />
                  <test-case name="NJasmineTests.Core.TestPositionTests.test_IsAncestorOf" executed="True" result="Success" success="True" time="0.004" asserts="0" />
                  <test-case name="NJasmineTests.Core.TestPositionTests.test_Parent" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="Namespace" name="Export" executed="True" result="Success" success="True" time="0.443" asserts="0">
            <results>
              <test-suite type="TestSuite" name="FixtureResultTest" executed="True" result="Success" success="True" time="0.424" asserts="0">
                <results>
                  <test-suite type="TestSuite" name="succeeds()" executed="True" result="Success" success="True" time="0.210" asserts="0">
                    <properties>
                      <property name="MultilineName" value="NJasmineTests.Export.FixtureResultTest,&#xA;succeeds()" />
                    </properties>
                    <results>
                      <test-case name="NJasmineTests.Export.FixtureResultTest, succeeds(), allows a passing test result" executed="True" result="Success" success="True" time="0.195" asserts="0">
                        <properties>
                          <property name="MultilineName" value="NJasmineTests.Export.FixtureResultTest,&#xA;succeeds(),&#xA;allows a passing test result" />
                        </properties>
                      </test-case>
                      <test-case name="NJasmineTests.Export.FixtureResultTest, succeeds(), asserts when running against error" executed="True" result="Success" success="True" time="0.007" asserts="0">
                        <properties>
                          <property name="MultilineName" value="NJasmineTests.Export.FixtureResultTest,&#xA;succeeds(),&#xA;asserts when running against error" />
                        </properties>
                      </test-case>
                      <test-case name="NJasmineTests.Export.FixtureResultTest, succeeds(), asserts when running against failure" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <properties>
                          <property name="MultilineName" value="NJasmineTests.Export.FixtureResultTest,&#xA;succeeds(),&#xA;asserts when running against failure" />
                        </properties>
                      </test-case>
                      <test-case name="NJasmineTests.Export.FixtureResultTest, succeeds(), asserts when running against no tests" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <properties>
                          <property name="MultilineName" value="NJasmineTests.Export.FixtureResultTest,&#xA;succeeds(),&#xA;asserts when running against no tests" />
                        </properties>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-suite type="TestSuite" name="failed()" executed="True" result="Success" success="True" time="0.010" asserts="0">
                    <properties>
                      <property name="MultilineName" value="NJasmineTests.Export.FixtureResultTest,&#xA;failed()" />
                    </properties>
                    <results>
                      <test-case name="NJasmineTests.Export.FixtureResultTest, failed(), allows test results with errors or failures" executed="True" result="Success" success="True" time="0.005" asserts="0">
                        <properties>
                          <property name="MultilineName" value="NJasmineTests.Export.FixtureResultTest,&#xA;failed(),&#xA;allows test results with errors or failures" />
                        </properties>
                      </test-case>
                      <test-case name="NJasmineTests.Export.FixtureResultTest, failed(), asserts when running against no tests" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <properties>
                          <property name="MultilineName" value="NJasmineTests.Export.FixtureResultTest,&#xA;failed(),&#xA;asserts when running against no tests" />
                        </properties>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-suite type="TestSuite" name="containsTrace" executed="True" result="Success" success="True" time="0.171" asserts="0">
                    <properties>
                      <property name="MultilineName" value="NJasmineTests.Export.FixtureResultTest,&#xA;containsTrace" />
                    </properties>
                    <results>
                      <test-case name="NJasmineTests.Export.FixtureResultTest, containsTrace, allows tests with the expected trace" executed="True" result="Success" success="True" time="0.160" asserts="0">
                        <properties>
                          <property name="MultilineName" value="NJasmineTests.Export.FixtureResultTest,&#xA;containsTrace,&#xA;allows tests with the expected trace" />
                        </properties>
                      </test-case>
                      <test-case name="NJasmineTests.Export.FixtureResultTest, containsTrace, fails tests without the expected trace" executed="True" result="Success" success="True" time="0.008" asserts="0">
                        <properties>
                          <property name="MultilineName" value="NJasmineTests.Export.FixtureResultTest,&#xA;containsTrace,&#xA;fails tests without the expected trace" />
                        </properties>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-suite type="TestSuite" name="hasTest" executed="True" result="Success" success="True" time="0.010" asserts="0">
                    <properties>
                      <property name="MultilineName" value="NJasmineTests.Export.FixtureResultTest,&#xA;hasTest" />
                    </properties>
                    <results>
                      <test-case name="NJasmineTests.Export.FixtureResultTest, hasTest, returns a test by name" executed="True" result="Success" success="True" time="0.006" asserts="0">
                        <properties>
                          <property name="MultilineName" value="NJasmineTests.Export.FixtureResultTest,&#xA;hasTest,&#xA;returns a test by name" />
                        </properties>
                      </test-case>
                      <test-case name="NJasmineTests.Export.FixtureResultTest, hasTest, gives a useful error message if the test is not found" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <properties>
                          <property name="MultilineName" value="NJasmineTests.Export.FixtureResultTest,&#xA;hasTest,&#xA;gives a useful error message if the test is not found" />
                        </properties>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-suite type="TestSuite" name="hasSuite" executed="True" result="Success" success="True" time="0.006" asserts="0">
                    <properties>
                      <property name="MultilineName" value="NJasmineTests.Export.FixtureResultTest,&#xA;hasSuite" />
                    </properties>
                    <results>
                      <test-case name="NJasmineTests.Export.FixtureResultTest, hasSuite, returns a test suite by name" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <properties>
                          <property name="MultilineName" value="NJasmineTests.Export.FixtureResultTest,&#xA;hasSuite,&#xA;returns a test suite by name" />
                        </properties>
                      </test-case>
                      <test-case name="NJasmineTests.Export.FixtureResultTest, hasSuite, gives a useful error message if the test suite is not found" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <properties>
                          <property name="MultilineName" value="NJasmineTests.Export.FixtureResultTest,&#xA;hasSuite,&#xA;gives a useful error message if the test suite is not found" />
                        </properties>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-suite type="TestSuite" name="withStackTraces()" executed="True" result="Success" success="True" time="0.006" asserts="0">
                    <properties>
                      <property name="MultilineName" value="NJasmineTests.Export.FixtureResultTest,&#xA;withStackTraces()" />
                    </properties>
                    <results>
                      <test-case name="NJasmineTests.Export.FixtureResultTest, withStackTraces(), it returns the stacktraces in a fixture result" executed="True" result="Success" success="True" time="0.004" asserts="0">
                        <properties>
                          <property name="MultilineName" value="NJasmineTests.Export.FixtureResultTest,&#xA;withStackTraces(),&#xA;it returns the stacktraces in a fixture result" />
                        </properties>
                      </test-case>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="TestSuite" name="SuiteResultTest" executed="True" result="Success" success="True" time="0.014" asserts="0">
                <results>
                  <test-suite type="TestSuite" name="thatsInconclusive()" executed="True" result="Success" success="True" time="0.009" asserts="0">
                    <properties>
                      <property name="MultilineName" value="NJasmineTests.Export.SuiteResultTest,&#xA;thatsInconclusive()" />
                    </properties>
                    <results>
                      <test-case name="NJasmineTests.Export.SuiteResultTest, thatsInconclusive(), allows results that are inconclusive" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <properties>
                          <property name="MultilineName" value="NJasmineTests.Export.SuiteResultTest,&#xA;thatsInconclusive(),&#xA;allows results that are inconclusive" />
                        </properties>
                      </test-case>
                      <test-case name="NJasmineTests.Export.SuiteResultTest, thatsInconclusive(), gives an error indicating the actual result when not inconclusive" executed="True" result="Success" success="True" time="0.004" asserts="0">
                        <properties>
                          <property name="MultilineName" value="NJasmineTests.Export.SuiteResultTest,&#xA;thatsInconclusive(),&#xA;gives an error indicating the actual result when not inconclusive" />
                        </properties>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-suite type="TestSuite" name="thatHasNoResults()" executed="True" result="Success" success="True" time="0.003" asserts="0">
                    <properties>
                      <property name="MultilineName" value="NJasmineTests.Export.SuiteResultTest,&#xA;thatHasNoResults()" />
                    </properties>
                    <results>
                      <test-case name="NJasmineTests.Export.SuiteResultTest, thatHasNoResults(), fails if the suite has results" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <properties>
                          <property name="MultilineName" value="NJasmineTests.Export.SuiteResultTest,&#xA;thatHasNoResults(),&#xA;fails if the suite has results" />
                        </properties>
                      </test-case>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="Namespace" name="Extras" executed="True" result="Success" success="True" time="0.094" asserts="0">
            <results>
              <test-suite type="TestSuite" name="ZipDeployToolsTest" executed="True" result="Success" success="True" time="0.092" asserts="0">
                <results>
                  <test-case name="NJasmineTests.Extras.ZipDeployToolsTest, gives a useful exception if the installation zip is not found" executed="True" result="Success" success="True" time="0.002" asserts="0">
                    <properties>
                      <property name="MultilineName" value="NJasmineTests.Extras.ZipDeployToolsTest,&#xA;gives a useful exception if the installation zip is not found" />
                    </properties>
                  </test-case>
                  <test-case name="NJasmineTests.Extras.ZipDeployToolsTest, can decompress installation zip" executed="True" result="Success" success="True" time="0.079" asserts="0">
                    <properties>
                      <property name="MultilineName" value="NJasmineTests.Extras.ZipDeployToolsTest,&#xA;can decompress installation zip" />
                    </properties>
                  </test-case>
                  <test-case name="NJasmineTests.Extras.ZipDeployToolsTest, decompressed zip includes empty folders" executed="True" result="Success" success="True" time="0.006" asserts="0">
                    <properties>
                      <property name="MultilineName" value="NJasmineTests.Extras.ZipDeployToolsTest,&#xA;decompressed zip includes empty folders" />
                    </properties>
                  </test-case>
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestSuite" name="SampleTest" executed="True" result="Success" success="True" time="0.014" asserts="0">
            <results>
              <test-suite type="TestSuite" name="player" executed="True" result="Success" success="True" time="0.013" asserts="0">
                <properties>
                  <property name="MultilineName" value="NJasmineTests.SampleTest,&#xA;player" />
                </properties>
                <results>
                  <test-case name="NJasmineTests.SampleTest, player, should be able to play the song" executed="True" result="Success" success="True" time="0.003" asserts="0">
                    <properties>
                      <property name="MultilineName" value="NJasmineTests.SampleTest,&#xA;player,&#xA;should be able to play the song" />
                    </properties>
                  </test-case>
                  <test-suite type="TestSuite" name="when song has been paused" executed="True" result="Success" success="True" time="0.007" asserts="0">
                    <properties>
                      <property name="MultilineName" value="NJasmineTests.SampleTest,&#xA;player,&#xA;when song has been paused" />
                    </properties>
                    <results>
                      <test-case name="NJasmineTests.SampleTest, player, when song has been paused, should indicate the song is not currently paused" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <properties>
                          <property name="MultilineName" value="NJasmineTests.SampleTest,&#xA;player,&#xA;when song has been paused,&#xA;should indicate the song is not currently paused" />
                        </properties>
                      </test-case>
                      <test-suite type="TestSuite" name="Resume" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <properties>
                          <property name="MultilineName" value="NJasmineTests.SampleTest,&#xA;player,&#xA;when song has been paused,&#xA;Resume" />
                        </properties>
                        <results>
                          <test-case name="NJasmineTests.SampleTest, player, when song has been paused, Resume, should indicate the song is playing" executed="True" result="Success" success="True" time="0.001" asserts="0">
                            <properties>
                              <property name="MultilineName" value="NJasmineTests.SampleTest,&#xA;player,&#xA;when song has been paused,&#xA;Resume,&#xA;should indicate the song is playing" />
                            </properties>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="Namespace" name="Specs" executed="True" result="Success" success="True" time="0.360" asserts="0">
            <results>
              <test-suite type="TestSuite" name="afterAll_failures_only_fail_the_fixture" executed="True" result="Success" success="True" time="0.007" asserts="0">
                <results>
                  <test-suite type="TestSuite" name="when cleanup is going to fail" executed="True" result="Success" success="True" time="0.002" asserts="0">
                    <properties>
                      <property name="MultilineName" value="NJasmineTests.Specs.afterAll_failures_only_fail_the_fixture,&#xA;when cleanup is going to fail" />
                    </properties>
                    <results>
                      <test-case name="NJasmineTests.Specs.afterAll_failures_only_fail_the_fixture, when cleanup is going to fail, then the test with failing cleanup" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <properties>
                          <property name="MultilineName" value="NJasmineTests.Specs.afterAll_failures_only_fail_the_fixture,&#xA;when cleanup is going to fail,&#xA;then the test with failing cleanup" />
                        </properties>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-case name="NJasmineTests.Specs.afterAll_failures_only_fail_the_fixture, then the test following the test with failing cleanup" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <properties>
                      <property name="MultilineName" value="NJasmineTests.Specs.afterAll_failures_only_fail_the_fixture,&#xA;then the test following the test with failing cleanup" />
                    </properties>
                  </test-case>
                  <test-case name="NJasmineTests.Specs.afterAll_failures_only_fail_the_fixture, then a test with failing cleanup and no following tests" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <properties>
                      <property name="MultilineName" value="NJasmineTests.Specs.afterAll_failures_only_fail_the_fixture,&#xA;then a test with failing cleanup and no following tests" />
                    </properties>
                  </test-case>
                </results>
              </test-suite>
              <test-suite type="TestSuite" name="arrange_after_test_is_not_included_in_prior_test" executed="True" result="Success" success="True" time="0.016" asserts="0">
                <results>
                  <test-case name="NJasmineTests.Specs.arrange_after_test_is_not_included_in_prior_test, runs a test" executed="True" result="Success" success="True" time="0.007" asserts="0">
                    <properties>
                      <property name="MultilineName" value="NJasmineTests.Specs.arrange_after_test_is_not_included_in_prior_test,&#xA;runs a test" />
                    </properties>
                  </test-case>
                  <test-case name="NJasmineTests.Specs.arrange_after_test_is_not_included_in_prior_test, runs another test" executed="True" result="Success" success="True" time="0.006" asserts="0">
                    <properties>
                      <property name="MultilineName" value="NJasmineTests.Specs.arrange_after_test_is_not_included_in_prior_test,&#xA;runs another test" />
                    </properties>
                  </test-case>
                </results>
              </test-suite>
              <test-suite type="TestSuite" name="arrange_operations_can_be_nested" executed="True" result="Success" success="True" time="0.021" asserts="0">
                <results>
                  <test-case name="NJasmineTests.Specs.arrange_operations_can_be_nested, has a test" executed="True" result="Success" success="True" time="0.019" asserts="0">
                    <properties>
                      <property name="MultilineName" value="NJasmineTests.Specs.arrange_operations_can_be_nested,&#xA;has a test" />
                    </properties>
                  </test-case>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="beforeAll" executed="True" result="Success" success="True" time="0.043" asserts="0">
                <results>
                  <test-suite type="TestSuite" name="beforeAll_and_afterAll_are_applied_to_the_correct_scope" executed="True" result="Success" success="True" time="0.022" asserts="0">
                    <results>
                      <test-case name="NJasmineTests.Specs.beforeAll.beforeAll_and_afterAll_are_applied_to_the_correct_scope, first test" executed="True" result="Success" success="True" time="0.007" asserts="0">
                        <properties>
                          <property name="MultilineName" value="NJasmineTests.Specs.beforeAll.beforeAll_and_afterAll_are_applied_to_the_correct_scope,&#xA;first test" />
                        </properties>
                      </test-case>
                      <test-suite type="TestSuite" name="in some context" executed="True" result="Success" success="True" time="0.008" asserts="0">
                        <properties>
                          <property name="MultilineName" value="NJasmineTests.Specs.beforeAll.beforeAll_and_afterAll_are_applied_to_the_correct_scope,&#xA;in some context" />
                        </properties>
                        <results>
                          <test-case name="NJasmineTests.Specs.beforeAll.beforeAll_and_afterAll_are_applied_to_the_correct_scope, in some context, second teest" executed="True" result="Success" success="True" time="0.003" asserts="0">
                            <properties>
                              <property name="MultilineName" value="NJasmineTests.Specs.beforeAll.beforeAll_and_afterAll_are_applied_to_the_correct_scope,&#xA;in some context,&#xA;second teest" />
                            </properties>
                          </test-case>
                          <test-case name="NJasmineTests.Specs.beforeAll.beforeAll_and_afterAll_are_applied_to_the_correct_scope, in some context, third teest" executed="True" result="Success" success="True" time="0.001" asserts="0">
                            <properties>
                              <property name="MultilineName" value="NJasmineTests.Specs.beforeAll.beforeAll_and_afterAll_are_applied_to_the_correct_scope,&#xA;in some context,&#xA;third teest" />
                            </properties>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestSuite" name="beforeAll_can_return_a_value" executed="True" result="Success" success="True" time="0.009" asserts="0">
                    <results>
                      <test-case name="NJasmineTests.Specs.beforeAll.beforeAll_can_return_a_value, then the value is initialized for the first test" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <properties>
                          <property name="MultilineName" value="NJasmineTests.Specs.beforeAll.beforeAll_can_return_a_value,&#xA;then the value is initialized for the first test" />
                        </properties>
                      </test-case>
                      <test-case name="NJasmineTests.Specs.beforeAll.beforeAll_can_return_a_value, then the value is reused for the second test" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <properties>
                          <property name="MultilineName" value="NJasmineTests.Specs.beforeAll.beforeAll_can_return_a_value,&#xA;then the value is reused for the second test" />
                        </properties>
                      </test-case>
                      <test-case name="NJasmineTests.Specs.beforeAll.beforeAll_can_return_a_value, then the value is reused for the third test" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <properties>
                          <property name="MultilineName" value="NJasmineTests.Specs.beforeAll.beforeAll_can_return_a_value,&#xA;then the value is reused for the third test" />
                        </properties>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-suite type="TestSuite" name="beforeAll_has_access_to_other_beforeAll_results" executed="True" result="Success" success="True" time="0.008" asserts="0">
                    <results>
                      <test-suite type="TestSuite" name="in a nested context" executed="True" result="Success" success="True" time="0.007" asserts="0">
                        <properties>
                          <property name="MultilineName" value="NJasmineTests.Specs.beforeAll.beforeAll_has_access_to_other_beforeAll_results,&#xA;in a nested context" />
                        </properties>
                        <results>
                          <test-suite type="TestSuite" name="in a further nested context" executed="True" result="Success" success="True" time="0.006" asserts="0">
                            <properties>
                              <property name="MultilineName" value="NJasmineTests.Specs.beforeAll.beforeAll_has_access_to_other_beforeAll_results,&#xA;in a nested context,&#xA;in a further nested context" />
                            </properties>
                            <results>
                              <test-case name="NJasmineTests.Specs.beforeAll.beforeAll_has_access_to_other_beforeAll_results, in a nested context, in a further nested context, has the same values for all" executed="True" result="Success" success="True" time="0.004" asserts="0">
                                <properties>
                                  <property name="MultilineName" value="NJasmineTests.Specs.beforeAll.beforeAll_has_access_to_other_beforeAll_results,&#xA;in a nested context,&#xA;in a further nested context,&#xA;has the same values for all" />
                                </properties>
                              </test-case>
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="TestSuite" name="can_mark_tests_as_ignored" executed="True" result="Success" success="True" time="0.005" asserts="0">
                <results>
                  <test-suite type="TestSuite" name="given an outer block" executed="True" result="Inconclusive" success="False" time="0.000" asserts="0">
                    <properties>
                      <property name="MultilineName" value="NJasmineTests.Specs.can_mark_tests_as_ignored,&#xA;given an outer block" />
                    </properties>
                  </test-suite>
                  <test-suite type="TestSuite" name="when ignore is set after a test" executed="True" result="Success" success="True" time="0.002" asserts="0">
                    <properties>
                      <property name="MultilineName" value="NJasmineTests.Specs.can_mark_tests_as_ignored,&#xA;when ignore is set after a test" />
                    </properties>
                    <results>
                      <test-case name="NJasmineTests.Specs.can_mark_tests_as_ignored, when ignore is set after a test, then the earlier test runs" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <properties>
                          <property name="MultilineName" value="NJasmineTests.Specs.can_mark_tests_as_ignored,&#xA;when ignore is set after a test,&#xA;then the earlier test runs" />
                        </properties>
                      </test-case>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="TestSuite" name="constructor_is_run_once_per_test" executed="True" result="Success" success="True" time="0.067" asserts="0">
                <results>
                  <test-case name="NJasmineTests.Specs.constructor_is_run_once_per_test, no state is saved from a previous run" executed="True" result="Success" success="True" time="0.004" asserts="0">
                    <properties>
                      <property name="MultilineName" value="NJasmineTests.Specs.constructor_is_run_once_per_test,&#xA;no state is saved from a previous run" />
                    </properties>
                  </test-case>
                  <test-case name="NJasmineTests.Specs.constructor_is_run_once_per_test, new instance is created per test" executed="True" result="Success" success="True" time="0.001" asserts="0">
                    <properties>
                      <property name="MultilineName" value="NJasmineTests.Specs.constructor_is_run_once_per_test,&#xA;new instance is created per test" />
                    </properties>
                  </test-case>
                  <test-case name="NJasmineTests.Specs.constructor_is_run_once_per_test, writes state in some tests" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <properties>
                      <property name="MultilineName" value="NJasmineTests.Specs.constructor_is_run_once_per_test,&#xA;writes state in some tests" />
                    </properties>
                  </test-case>
                  <test-case name="NJasmineTests.Specs.constructor_is_run_once_per_test, no state is saved from a previous run`2" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <properties>
                      <property name="MultilineName" value="NJasmineTests.Specs.constructor_is_run_once_per_test,&#xA;no state is saved from a previous run`2" />
                    </properties>
                  </test-case>
                  <test-case name="NJasmineTests.Specs.constructor_is_run_once_per_test, new instance is created per test`2" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <properties>
                      <property name="MultilineName" value="NJasmineTests.Specs.constructor_is_run_once_per_test,&#xA;new instance is created per test`2" />
                    </properties>
                  </test-case>
                  <test-case name="NJasmineTests.Specs.constructor_is_run_once_per_test, writes state in some tests`2" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <properties>
                      <property name="MultilineName" value="NJasmineTests.Specs.constructor_is_run_once_per_test,&#xA;writes state in some tests`2" />
                    </properties>
                  </test-case>
                  <test-case name="NJasmineTests.Specs.constructor_is_run_once_per_test, no state is saved from a previous run`3" executed="True" result="Success" success="True" time="0.006" asserts="0">
                    <properties>
                      <property name="MultilineName" value="NJasmineTests.Specs.constructor_is_run_once_per_test,&#xA;no state is saved from a previous run`3" />
                    </properties>
                  </test-case>
                  <test-case name="NJasmineTests.Specs.constructor_is_run_once_per_test, new instance is created per test`3" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <properties>
                      <property name="MultilineName" value="NJasmineTests.Specs.constructor_is_run_once_per_test,&#xA;new instance is created per test`3" />
                    </properties>
                  </test-case>
                  <test-case name="NJasmineTests.Specs.constructor_is_run_once_per_test, writes state in some tests`3" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <properties>
                      <property name="MultilineName" value="NJasmineTests.Specs.constructor_is_run_once_per_test,&#xA;writes state in some tests`3" />
                    </properties>
                  </test-case>
                  <test-case name="NJasmineTests.Specs.constructor_is_run_once_per_test, no state is saved from a previous run`4" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <properties>
                      <property name="MultilineName" value="NJasmineTests.Specs.constructor_is_run_once_per_test,&#xA;no state is saved from a previous run`4" />
                    </properties>
                  </test-case>
                  <test-case name="NJasmineTests.Specs.constructor_is_run_once_per_test, new instance is created per test`4" executed="True" result="Success" success="True" time="0.001" asserts="0">
                    <properties>
                      <property name="MultilineName" value="NJasmineTests.Specs.constructor_is_run_once_per_test,&#xA;new instance is created per test`4" />
                    </properties>
                  </test-case>
                  <test-case name="NJasmineTests.Specs.constructor_is_run_once_per_test, writes state in some tests`4" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <properties>
                      <property name="MultilineName" value="NJasmineTests.Specs.constructor_is_run_once_per_test,&#xA;writes state in some tests`4" />
                    </properties>
                  </test-case>
                  <test-case name="NJasmineTests.Specs.constructor_is_run_once_per_test, no state is saved from a previous run`5" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <properties>
                      <property name="MultilineName" value="NJasmineTests.Specs.constructor_is_run_once_per_test,&#xA;no state is saved from a previous run`5" />
                    </properties>
                  </test-case>
                  <test-case name="NJasmineTests.Specs.constructor_is_run_once_per_test, new instance is created per test`5" executed="True" result="Success" success="True" time="0.001" asserts="0">
                    <properties>
                      <property name="MultilineName" value="NJasmineTests.Specs.constructor_is_run_once_per_test,&#xA;new instance is created per test`5" />
                    </properties>
                  </test-case>
                  <test-case name="NJasmineTests.Specs.constructor_is_run_once_per_test, writes state in some tests`5" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <properties>
                      <property name="MultilineName" value="NJasmineTests.Specs.constructor_is_run_once_per_test,&#xA;writes state in some tests`5" />
                    </properties>
                  </test-case>
                  <test-case name="NJasmineTests.Specs.constructor_is_run_once_per_test, no state is saved from a previous run`6" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <properties>
                      <property name="MultilineName" value="NJasmineTests.Specs.constructor_is_run_once_per_test,&#xA;no state is saved from a previous run`6" />
                    </properties>
                  </test-case>
                  <test-case name="NJasmineTests.Specs.constructor_is_run_once_per_test, new instance is created per test`6" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <properties>
                      <property name="MultilineName" value="NJasmineTests.Specs.constructor_is_run_once_per_test,&#xA;new instance is created per test`6" />
                    </properties>
                  </test-case>
                  <test-case name="NJasmineTests.Specs.constructor_is_run_once_per_test, writes state in some tests`6" executed="True" result="Success" success="True" time="0.008" asserts="0">
                    <properties>
                      <property name="MultilineName" value="NJasmineTests.Specs.constructor_is_run_once_per_test,&#xA;writes state in some tests`6" />
                    </properties>
                  </test-case>
                  <test-case name="NJasmineTests.Specs.constructor_is_run_once_per_test, no state is saved from a previous run`7" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <properties>
                      <property name="MultilineName" value="NJasmineTests.Specs.constructor_is_run_once_per_test,&#xA;no state is saved from a previous run`7" />
                    </properties>
                  </test-case>
                  <test-case name="NJasmineTests.Specs.constructor_is_run_once_per_test, new instance is created per test`7" executed="True" result="Success" success="True" time="0.001" asserts="0">
                    <properties>
                      <property name="MultilineName" value="NJasmineTests.Specs.constructor_is_run_once_per_test,&#xA;new instance is created per test`7" />
                    </properties>
                  </test-case>
                  <test-case name="NJasmineTests.Specs.constructor_is_run_once_per_test, writes state in some tests`7" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <properties>
                      <property name="MultilineName" value="NJasmineTests.Specs.constructor_is_run_once_per_test,&#xA;writes state in some tests`7" />
                    </properties>
                  </test-case>
                  <test-case name="NJasmineTests.Specs.constructor_is_run_once_per_test, no state is saved from a previous run`8" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <properties>
                      <property name="MultilineName" value="NJasmineTests.Specs.constructor_is_run_once_per_test,&#xA;no state is saved from a previous run`8" />
                    </properties>
                  </test-case>
                  <test-case name="NJasmineTests.Specs.constructor_is_run_once_per_test, new instance is created per test`8" executed="True" result="Success" success="True" time="0.001" asserts="0">
                    <properties>
                      <property name="MultilineName" value="NJasmineTests.Specs.constructor_is_run_once_per_test,&#xA;new instance is created per test`8" />
                    </properties>
                  </test-case>
                  <test-case name="NJasmineTests.Specs.constructor_is_run_once_per_test, writes state in some tests`8" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <properties>
                      <property name="MultilineName" value="NJasmineTests.Specs.constructor_is_run_once_per_test,&#xA;writes state in some tests`8" />
                    </properties>
                  </test-case>
                  <test-case name="NJasmineTests.Specs.constructor_is_run_once_per_test, no state is saved from a previous run`9" executed="True" result="Success" success="True" time="0.001" asserts="0">
                    <properties>
                      <property name="MultilineName" value="NJasmineTests.Specs.constructor_is_run_once_per_test,&#xA;no state is saved from a previous run`9" />
                    </properties>
                  </test-case>
                  <test-case name="NJasmineTests.Specs.constructor_is_run_once_per_test, new instance is created per test`9" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <properties>
                      <property name="MultilineName" value="NJasmineTests.Specs.constructor_is_run_once_per_test,&#xA;new instance is created per test`9" />
                    </properties>
                  </test-case>
                  <test-case name="NJasmineTests.Specs.constructor_is_run_once_per_test, writes state in some tests`9" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <properties>
                      <property name="MultilineName" value="NJasmineTests.Specs.constructor_is_run_once_per_test,&#xA;writes state in some tests`9" />
                    </properties>
                  </test-case>
                  <test-case name="NJasmineTests.Specs.constructor_is_run_once_per_test, no state is saved from a previous run`10" executed="True" result="Success" success="True" time="0.001" asserts="0">
                    <properties>
                      <property name="MultilineName" value="NJasmineTests.Specs.constructor_is_run_once_per_test,&#xA;no state is saved from a previous run`10" />
                    </properties>
                  </test-case>
                  <test-case name="NJasmineTests.Specs.constructor_is_run_once_per_test, new instance is created per test`10" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <properties>
                      <property name="MultilineName" value="NJasmineTests.Specs.constructor_is_run_once_per_test,&#xA;new instance is created per test`10" />
                    </properties>
                  </test-case>
                  <test-case name="NJasmineTests.Specs.constructor_is_run_once_per_test, writes state in some tests`10" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <properties>
                      <property name="MultilineName" value="NJasmineTests.Specs.constructor_is_run_once_per_test,&#xA;writes state in some tests`10" />
                    </properties>
                  </test-case>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="error_during_nunit_fixture_calls" executed="True" result="Inconclusive" success="False" time="0.000" asserts="0" />
              <test-suite type="TestSuite" name="GivenWhenThenFixture_supports_the_Basics" executed="True" result="Success" success="True" time="0.030" asserts="0">
                <results>
                  <test-suite type="TestSuite" name="given the environment is in a particular state" executed="True" result="Success" success="True" time="0.028" asserts="0">
                    <properties>
                      <property name="MultilineName" value="NJasmineTests.Specs.GivenWhenThenFixture_supports_the_Basics,&#xA;given the environment is in a particular state" />
                    </properties>
                    <results>
                      <test-suite type="TestSuite" name="when the system under test is used in a particular manner" executed="True" result="Success" success="True" time="0.008" asserts="0">
                        <properties>
                          <property name="MultilineName" value="NJasmineTests.Specs.GivenWhenThenFixture_supports_the_Basics,&#xA;given the environment is in a particular state,&#xA;when the system under test is used in a particular manner" />
                        </properties>
                        <results>
                          <test-case name="NJasmineTests.Specs.GivenWhenThenFixture_supports_the_Basics, given the environment is in a particular state, when the system under test is used in a particular manner, then a particular result is expected" executed="True" result="Success" success="True" time="0.007" asserts="0">
                            <properties>
                              <property name="MultilineName" value="NJasmineTests.Specs.GivenWhenThenFixture_supports_the_Basics,&#xA;given the environment is in a particular state,&#xA;when the system under test is used in a particular manner,&#xA;then a particular result is expected" />
                            </properties>
                          </test-case>
                        </results>
                      </test-suite>
                      <test-suite type="TestSuite" name="given the environment is in an even more particular state" executed="True" result="Success" success="True" time="0.017" asserts="0">
                        <properties>
                          <property name="MultilineName" value="NJasmineTests.Specs.GivenWhenThenFixture_supports_the_Basics,&#xA;given the environment is in a particular state,&#xA;given the environment is in an even more particular state" />
                        </properties>
                        <results>
                          <test-suite type="TestSuite" name="when the system is used in another manner" executed="True" result="Success" success="True" time="0.017" asserts="0">
                            <properties>
                              <property name="MultilineName" value="NJasmineTests.Specs.GivenWhenThenFixture_supports_the_Basics,&#xA;given the environment is in a particular state,&#xA;given the environment is in an even more particular state,&#xA;when the system is used in another manner" />
                            </properties>
                            <results>
                              <test-case name="NJasmineTests.Specs.GivenWhenThenFixture_supports_the_Basics, given the environment is in a particular state, given the environment is in an even more particular state, when the system is used in another manner, then another result is expected" executed="True" result="Success" success="True" time="0.007" asserts="0">
                                <properties>
                                  <property name="MultilineName" value="NJasmineTests.Specs.GivenWhenThenFixture_supports_the_Basics,&#xA;given the environment is in a particular state,&#xA;given the environment is in an even more particular state,&#xA;when the system is used in another manner,&#xA;then another result is expected" />
                                </properties>
                              </test-case>
                              <test-case name="NJasmineTests.Specs.GivenWhenThenFixture_supports_the_Basics, given the environment is in a particular state, given the environment is in an even more particular state, when the system is used in another manner, then yet another result is expected" executed="True" result="Success" success="True" time="0.005" asserts="0">
                                <properties>
                                  <property name="MultilineName" value="NJasmineTests.Specs.GivenWhenThenFixture_supports_the_Basics,&#xA;given the environment is in a particular state,&#xA;given the environment is in an even more particular state,&#xA;when the system is used in another manner,&#xA;then yet another result is expected" />
                                </properties>
                              </test-case>
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="TestSuite" name="imports_NUnit_fixture" executed="True" result="Success" success="True" time="0.053" asserts="0">
                <results>
                  <test-suite type="TestSuite" name="a block" executed="True" result="Success" success="True" time="0.050" asserts="0">
                    <properties>
                      <property name="MultilineName" value="NJasmineTests.Specs.imports_NUnit_fixture,&#xA;a block" />
                    </properties>
                    <results>
                      <test-case name="NJasmineTests.Specs.imports_NUnit_fixture, a block, check fixtures" executed="True" result="Success" success="True" time="0.018" asserts="0">
                        <properties>
                          <property name="MultilineName" value="NJasmineTests.Specs.imports_NUnit_fixture,&#xA;a block,&#xA;check fixtures" />
                        </properties>
                      </test-case>
                      <test-suite type="TestSuite" name="a sub block" executed="True" result="Success" success="True" time="0.019" asserts="0">
                        <properties>
                          <property name="MultilineName" value="NJasmineTests.Specs.imports_NUnit_fixture,&#xA;a block,&#xA;a sub block" />
                        </properties>
                        <results>
                          <test-case name="NJasmineTests.Specs.imports_NUnit_fixture, a block, a sub block, check fixtures again" executed="True" result="Success" success="True" time="0.015" asserts="0">
                            <properties>
                              <property name="MultilineName" value="NJasmineTests.Specs.imports_NUnit_fixture,&#xA;a block,&#xA;a sub block,&#xA;check fixtures again" />
                            </properties>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="TestSuite" name="suite_arranging_disposables" executed="True" result="Success" success="True" time="0.040" asserts="0">
                <results>
                  <test-suite type="TestSuite" name="first describe block" executed="True" result="Success" success="True" time="0.010" asserts="0">
                    <properties>
                      <property name="MultilineName" value="NJasmineTests.Specs.suite_arranging_disposables,&#xA;first describe block" />
                    </properties>
                    <results>
                      <test-case name="NJasmineTests.Specs.suite_arranging_disposables, first describe block, a test" executed="True" result="Success" success="True" time="0.010" asserts="0">
                        <properties>
                          <property name="MultilineName" value="NJasmineTests.Specs.suite_arranging_disposables,&#xA;first describe block,&#xA;a test" />
                        </properties>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-suite type="TestSuite" name="second describe block" executed="True" result="Success" success="True" time="0.027" asserts="0">
                    <properties>
                      <property name="MultilineName" value="NJasmineTests.Specs.suite_arranging_disposables,&#xA;second describe block" />
                    </properties>
                    <results>
                      <test-suite type="TestSuite" name="nested describe block" executed="True" result="Success" success="True" time="0.025" asserts="0">
                        <properties>
                          <property name="MultilineName" value="NJasmineTests.Specs.suite_arranging_disposables,&#xA;second describe block,&#xA;nested describe block" />
                        </properties>
                        <results>
                          <test-suite type="TestSuite" name="another describe block" executed="True" result="Success" success="True" time="0.025" asserts="0">
                            <properties>
                              <property name="MultilineName" value="NJasmineTests.Specs.suite_arranging_disposables,&#xA;second describe block,&#xA;nested describe block,&#xA;another describe block" />
                            </properties>
                            <results>
                              <test-case name="NJasmineTests.Specs.suite_arranging_disposables, second describe block, nested describe block, another describe block, a test" executed="True" result="Success" success="True" time="0.010" asserts="0">
                                <properties>
                                  <property name="MultilineName" value="NJasmineTests.Specs.suite_arranging_disposables,&#xA;second describe block,&#xA;nested describe block,&#xA;another describe block,&#xA;a test" />
                                </properties>
                              </test-case>
                              <test-case name="NJasmineTests.Specs.suite_arranging_disposables, second describe block, nested describe block, another describe block, inline using" executed="True" result="Success" success="True" time="0.010" asserts="0">
                                <properties>
                                  <property name="MultilineName" value="NJasmineTests.Specs.suite_arranging_disposables,&#xA;second describe block,&#xA;nested describe block,&#xA;another describe block,&#xA;inline using" />
                                </properties>
                              </test-case>
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="TestSuite" name="suite_arranging_nondisposables" executed="True" result="Success" success="True" time="0.030" asserts="0">
                <results>
                  <test-suite type="TestSuite" name="first describe block" executed="True" result="Success" success="True" time="0.010" asserts="0">
                    <properties>
                      <property name="MultilineName" value="NJasmineTests.Specs.suite_arranging_nondisposables,&#xA;first describe block" />
                    </properties>
                    <results>
                      <test-case name="NJasmineTests.Specs.suite_arranging_nondisposables, first describe block, a test" executed="True" result="Success" success="True" time="0.008" asserts="0">
                        <properties>
                          <property name="MultilineName" value="NJasmineTests.Specs.suite_arranging_nondisposables,&#xA;first describe block,&#xA;a test" />
                        </properties>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-suite type="TestSuite" name="second describe block" executed="True" result="Success" success="True" time="0.017" asserts="0">
                    <properties>
                      <property name="MultilineName" value="NJasmineTests.Specs.suite_arranging_nondisposables,&#xA;second describe block" />
                    </properties>
                    <results>
                      <test-suite type="TestSuite" name="nested describe block" executed="True" result="Success" success="True" time="0.016" asserts="0">
                        <properties>
                          <property name="MultilineName" value="NJasmineTests.Specs.suite_arranging_nondisposables,&#xA;second describe block,&#xA;nested describe block" />
                        </properties>
                        <results>
                          <test-suite type="TestSuite" name="another describe block" executed="True" result="Success" success="True" time="0.013" asserts="0">
                            <properties>
                              <property name="MultilineName" value="NJasmineTests.Specs.suite_arranging_nondisposables,&#xA;second describe block,&#xA;nested describe block,&#xA;another describe block" />
                            </properties>
                            <results>
                              <test-case name="NJasmineTests.Specs.suite_arranging_nondisposables, second describe block, nested describe block, another describe block, a test" executed="True" result="Success" success="True" time="0.004" asserts="0">
                                <properties>
                                  <property name="MultilineName" value="NJasmineTests.Specs.suite_arranging_nondisposables,&#xA;second describe block,&#xA;nested describe block,&#xA;another describe block,&#xA;a test" />
                                </properties>
                              </test-case>
                              <test-case name="NJasmineTests.Specs.suite_arranging_nondisposables, second describe block, nested describe block, another describe block, inline using" executed="True" result="Success" success="True" time="0.007" asserts="0">
                                <properties>
                                  <property name="MultilineName" value="NJasmineTests.Specs.suite_arranging_nondisposables,&#xA;second describe block,&#xA;nested describe block,&#xA;another describe block,&#xA;inline using" />
                                </properties>
                              </test-case>
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="TestSuite" name="supports_categories" executed="True" result="Success" success="True" time="0.010" asserts="0">
                <results>
                  <test-suite type="TestSuite" name="when using category Foo then Bar" executed="True" result="Success" success="True" time="0.008" asserts="0">
                    <properties>
                      <property name="MultilineName" value="NJasmineTests.Specs.supports_categories,&#xA;when using category Foo then Bar" />
                    </properties>
                    <results>
                      <test-case name="NJasmineTests.Specs.supports_categories, when using category Foo then Bar, then tests have Foo" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <categories>
                          <category name="Foo" />
                        </categories>
                        <properties>
                          <property name="MultilineName" value="NJasmineTests.Specs.supports_categories,&#xA;when using category Foo then Bar,&#xA;then tests have Foo" />
                        </properties>
                      </test-case>
                      <test-case name="NJasmineTests.Specs.supports_categories, when using category Foo then Bar, then tests have For and Bar" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <categories>
                          <category name="Foo" />
                          <category name="Bar" />
                        </categories>
                        <properties>
                          <property name="MultilineName" value="NJasmineTests.Specs.supports_categories,&#xA;when using category Foo then Bar,&#xA;then tests have For and Bar" />
                        </properties>
                      </test-case>
                      <test-suite type="TestSuite" name="when in a nested block and using a category" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <categories>
                          <category name="Foo" />
                          <category name="Bar" />
                        </categories>
                        <properties>
                          <property name="MultilineName" value="NJasmineTests.Specs.supports_categories,&#xA;when using category Foo then Bar,&#xA;when in a nested block and using a category" />
                        </properties>
                        <results>
                          <test-case name="NJasmineTests.Specs.supports_categories, when using category Foo then Bar, when in a nested block and using a category, then the nested block has category Foo, Bar" executed="True" result="Success" success="True" time="0.000" asserts="0">
                            <categories>
                              <category name="Baz" />
                            </categories>
                            <properties>
                              <property name="MultilineName" value="NJasmineTests.Specs.supports_categories,&#xA;when using category Foo then Bar,&#xA;when in a nested block and using a category,&#xA;then the nested block has category Foo, Bar" />
                            </properties>
                          </test-case>
                          <test-case name="NJasmineTests.Specs.supports_categories, when using category Foo then Bar, when in a nested block and using a category, then the test only has category Baz" executed="True" result="Success" success="True" time="0.000" asserts="0">
                            <categories>
                              <category name="Baz" />
                            </categories>
                            <properties>
                              <property name="MultilineName" value="NJasmineTests.Specs.supports_categories,&#xA;when using category Foo then Bar,&#xA;when in a nested block and using a category,&#xA;then the test only has category Baz" />
                            </properties>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="TestSuite" name="supports_unimplemented_specs" executed="True" result="Inconclusive" success="False" time="0.005" asserts="0">
                <results>
                  <test-case name="NJasmineTests.Specs.supports_unimplemented_specs, an unimplemented test() block" executed="False" result="NotRunnable">
                    <properties>
                      <property name="MultilineName" value="NJasmineTests.Specs.supports_unimplemented_specs,&#xA;an unimplemented test() block" />
                    </properties>
                    <reason>
                      <message><![CDATA[Specification not implemented.]]></message>
                    </reason>
                  </test-case>
                  <test-suite type="TestSuite" name="nested too of course" executed="True" result="Inconclusive" success="False" time="0.001" asserts="0">
                    <properties>
                      <property name="MultilineName" value="NJasmineTests.Specs.supports_unimplemented_specs,&#xA;nested too of course" />
                    </properties>
                    <results>
                      <test-case name="NJasmineTests.Specs.supports_unimplemented_specs, nested too of course, an unimplemented test() block" executed="False" result="NotRunnable">
                        <properties>
                          <property name="MultilineName" value="NJasmineTests.Specs.supports_unimplemented_specs,&#xA;nested too of course,&#xA;an unimplemented test() block" />
                        </properties>
                        <reason>
                          <message><![CDATA[Specification not implemented.]]></message>
                        </reason>
                      </test-case>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="TestSuite" name="test_name_joins_specification" executed="True" result="Success" success="True" time="0.004" asserts="0">
                <results>
                  <test-case name="NJasmineTests.Specs.test_name_joins_specification, simple test" executed="True" result="Success" success="True" time="0.001" asserts="0">
                    <properties>
                      <property name="MultilineName" value="NJasmineTests.Specs.test_name_joins_specification,&#xA;simple test" />
                    </properties>
                  </test-case>
                  <test-suite type="TestSuite" name="simple describe" executed="True" result="Success" success="True" time="0.001" asserts="0">
                    <properties>
                      <property name="MultilineName" value="NJasmineTests.Specs.test_name_joins_specification,&#xA;simple describe" />
                    </properties>
                    <results>
                      <test-case name="NJasmineTests.Specs.test_name_joins_specification, simple describe, simple test" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <properties>
                          <property name="MultilineName" value="NJasmineTests.Specs.test_name_joins_specification,&#xA;simple describe,&#xA;simple test" />
                        </properties>
                      </test-case>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="SetUpFixture" name="WithNamespaceSetup" executed="True" result="Success" success="True" time="0.004" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="experimenting_with_nunit_namespace_setup" executed="True" result="Success" success="True" time="0.001" asserts="44">
                    <results>
                      <test-case name="NJasmineTests.Specs.WithNamespaceSetup.experimenting_with_nunit_namespace_setup.only_shows_second_namespace_setup_hmm" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
    </results>
  </test-suite>
</test-results>