<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NJasmine</name>
    </assembly>
    <members>
        <member name="M:NJasmine.GivenWhenThenFixture.describe(System.String,System.Action)">
            <summary>
            Branches the current test specification
            </summary>
            <param name="description">Description text used to name the test branch.</param>
            <param name="specification">The branched portion of the specification.</param>
        </member>
        <member name="M:NJasmine.GivenWhenThenFixture.given(System.String,System.Action)">
            <summary>
            Branches the current test specification
            </summary>
            <param name="description">Description text used to name the test branch -- will be prefixed with 'given'.</param>
            <param name="specification">The branched portion of the specification.</param>
        </member>
        <member name="M:NJasmine.GivenWhenThenFixture.when(System.String,System.Action)">
            <summary>
            Branches the current test specification.
            </summary>
            <param name="description">Description text used to name the test branch -- will be prefixed with 'when'.</param>
            <param name="specification">The branched portion of the specification.</param>
        </member>
        <member name="M:NJasmine.GivenWhenThenFixture.then(System.String,System.Action)">
            <summary>
            Adds a test.
            </summary>
            <param name="description">The description that names the test -- will be prefixed with 'then'.</param>
            <param name="test">The test implementation.</param>
        </member>
        <member name="M:NJasmine.GivenWhenThenFixture.then(System.String)">
            <summary>
            Adds an unimplemented test.
            </summary>
            <param name="description">The description that names the test -- will be prefixed with 'then'.</param>
        </member>
        <member name="M:NJasmine.GivenWhenThenFixture.it(System.String,System.Action)">
            <summary>
            Adds a test
            </summary>
            <param name="description">The description that names the test.</param>
            <param name="action">The test implementation.</param>
        </member>
        <member name="M:NJasmine.GivenWhenThenFixture.it(System.String)">
            <summary>
            Adds an unimplemented test.
            </summary>
            <param name="description">The description that names the test.</param>
        </member>
        <member name="M:NJasmine.GivenWhenThenFixture.afterEach(System.Action)">
            <summary>
            Adds cleanup code to be ran after each test in the following context.
            </summary>
            <param name="cleanup">The cleanup code.</param>
        </member>
        <member name="M:NJasmine.GivenWhenThenFixture.cleanup(System.Action)">
            <summary>
            Adds cleanup code to be ran after each test in the following context.
            </summary>
            <param name="cleanup">The cleanup code.</param>
        </member>
        <member name="M:NJasmine.GivenWhenThenFixture.beforeEach(System.Action)">
            <summary>
            Adds initialization code to be before after each test in the following context.
            </summary>
            <param name="action">The initialization code.</param>
        </member>
        <member name="M:NJasmine.GivenWhenThenFixture.arrange(System.Action)">
            <summary>
            Adds initialization code to be before after each test in the following context.
            </summary>
            <param name="action">The initialization code.</param>
        </member>
        <member name="M:NJasmine.GivenWhenThenFixture.act(System.Action)">
            <summary>
            Functionally the same as arrange(), has the semantics of exercising the sut.
            </summary>
            <param name="action">The initialization code.</param>
        </member>
        <member name="M:NJasmine.GivenWhenThenFixture.arrange``1(System.Func{``0})">
            <summary>
            Adds initialization code to be before after each test in the following context.
            A return value can be used in the remainder of the test.
            If that return value supports IDisposable, it will be disposed when the test is done.
            </summary>
            <param name="action">The initialization code.</param>
            <returns>The result of the initialization code.</returns>
        </member>
        <member name="M:NJasmine.GivenWhenThenFixture.arrange``1">
            <summary>
            Adds initialization code to instantiate a class before after each test in the following context.
            If that class supports IDisposable, it will be disposed when the test is done.
            </summary>
            <typeparam name="TArranged">The class to be created.</typeparam>
            <returns>The class instance created.</returns>
        </member>
        <member name="M:NJasmine.GivenWhenThenFixture.beforeAll(System.Action)">
            <summary>
            Adds initialization code to be ran once before all tests in the following context.
            </summary>
            <param name="action">The initialization code.</param>
        </member>
        <member name="M:NJasmine.GivenWhenThenFixture.beforeAll``1(System.Func{``0})">
            <summary>
            Adds initialization code to be ran once before all tests in the following context.
            The initialization code can return a value, which will be made available to every test
            in the following context.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="action">The initialization code.</param>
            <returns>The return value of the initialization code.</returns>
        </member>
        <member name="M:NJasmine.GivenWhenThenFixture.afterAll(System.Action)">
            <summary>
            Adds cleanup code to be ran once after all tests in the following context.
            </summary>
            <param name="action">The cleanup code.</param>
        </member>
        <member name="M:NJasmine.GivenWhenThenFixture.importNUnit``1">
            <summary>
            Imports an NUnit fixture, running its setup and teardown functions.
            </summary>
            <typeparam name="TFixture">The type of the NUnit fixture</typeparam>
            <returns>The NUnit fixture instance.</returns>
        </member>
        <member name="M:NJasmine.GivenWhenThenFixture.ignoreBecause(System.String)">
            <summary>
            Indicates that the tests in the following specification context should not
            be ran unless the user explicitly asks for them to be ran.  Similar to
            NUnit's ExplicitAttribute.
            </summary>
            <param name="reason"></param>
        </member>
        <member name="M:NJasmine.GivenWhenThenFixture.expect(System.Linq.Expressions.Expression{System.Func{System.Boolean}})">
            <summary>
            Verifies a particular expecation when the tests run.
            </summary>
            <param name="expectation">The expectation.</param>
        </member>
        <member name="M:NJasmine.GivenWhenThenFixture.setWaitTimeout(System.Int32)">
            <summary>
            Modifies the default timeouts used by waitUntil and expectEventually.
            </summary>
            <param name="msWaitMax">The maximum time to wait, in milliseconds.</param>
        </member>
        <member name="M:NJasmine.GivenWhenThenFixture.setWaitIncrement(System.Int32)">
            <summary>
            Modifies the default polling interval used by waitUntil and expectEventually.
            </summary>
            <param name="msWaitIncrement">The polling interval, in seconds.</param>
        </member>
        <member name="M:NJasmine.GivenWhenThenFixture.expectEventually(System.Linq.Expressions.Expression{System.Func{System.Boolean}},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Verifies a particular expectation is true as the test runs.  Will wait for a timeout
            if the expectation is not initially true.
            </summary>
            <param name="expectation">The expectation.</param>
            <param name="msWaitMax">The time to wait, in milliseconds.</param>
            <param name="msWaitIncrement">The polling interval, in milliseconds.</param>
        </member>
        <member name="M:NJasmine.GivenWhenThenFixture.waitUntil(System.Linq.Expressions.Expression{System.Func{System.Boolean}},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Verifies a particular expectation is true as the test runs.  Will wait for a timeout
            if the expectation is not initially true.
            </summary>
            <param name="expectation">The expectation.</param>
            <param name="msWaitMax">The time to wait, in milliseconds.</param>
            <param name="msWaitIncrement">The polling interval, in milliseconds.</param>
        </member>
    </members>
</doc>
